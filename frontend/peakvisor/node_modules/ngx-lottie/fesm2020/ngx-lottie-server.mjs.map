{"version":3,"file":"ngx-lottie-server.mjs","sources":["../../../../libs/ngx-lottie/server/src/utils.ts","../../../../libs/ngx-lottie/server/src/internals.ts","../../../../libs/ngx-lottie/server/src/lottie-server.module.ts","../../../../libs/ngx-lottie/server/src/ngx-lottie-server.ts"],"sourcesContent":["import { readFile } from 'fs';\n\nimport { AnimationData } from './symbols';\n\n/** A simple cache used to store the serialized animation data. */\nconst cache = new Map<string, AnimationData>();\n\nexport function readFileWithAnimationData(path: string): Promise<AnimationData> {\n  return cache.has(path)\n    ? Promise.resolve(cache.get(path)!)\n    : new Promise((resolve, reject) => {\n        readFile(path, (error, buffer) => {\n          if (error) {\n            reject(error);\n          } else {\n            const data = buffer.toString();\n            cache.set(path, data);\n            resolve(data);\n          }\n        });\n      });\n}\n","import { join } from 'path';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename, transformAnimationFilenameToKey } from 'ngx-lottie';\n\nimport { readFileWithAnimationData } from './utils';\nimport { LottieServerOptions, PathToAnimation, AnimationData } from './symbols';\n\n/** Will be provided through Terser global definitions when the app is build in production mode. */\ndeclare const ngDevMode: boolean;\n\nfunction readAndTransferAnimationData(\n  transferState: TransferState,\n  animations: AnimationFilename[],\n  pathsToAnimations: PathToAnimation[],\n): Promise<void>[] {\n  const sources: Promise<void>[] = [];\n\n  for (let i = 0, length = animations.length; i < length; i++) {\n    const path = pathsToAnimations[i];\n\n    const source = readFileWithAnimationData(path)\n      .then(animationData => {\n        transferAnimationData(transferState, animations[i], animationData);\n      })\n      .catch(error => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          console.error(`Failed to read the following file ${path}. Error: `, error);\n        }\n\n        // This is empty since we don't have to do anything if the file was failed to read.\n      });\n\n    sources.push(source);\n  }\n\n  return sources;\n}\n\nfunction transferAnimationData(\n  state: TransferState,\n  animation: AnimationFilename,\n  animationData: AnimationData,\n): void {\n  animation = transformAnimationFilenameToKey(animation);\n  const key = makeStateKey(animation);\n  state.set(key, JSON.parse(animationData));\n}\n\nexport function appInitializerFactory(options: LottieServerOptions, state: TransferState) {\n  const pathsToAnimations = resolveLottiePaths(options);\n  const sources = readAndTransferAnimationData(\n    state,\n    options.preloadAnimations.animations,\n    pathsToAnimations,\n  );\n\n  return () => Promise.all(sources);\n}\n\nexport function resolveLottiePaths({ preloadAnimations }: LottieServerOptions): PathToAnimation[] {\n  const { folder, animations } = preloadAnimations;\n  const path = join(process.cwd(), folder);\n\n  return animations.map(animation => join(path, animation));\n}\n","import { NgModule, ModuleWithProviders, InjectionToken, APP_INITIALIZER } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\n\nimport { LottieServerOptions } from './symbols';\nimport { appInitializerFactory } from './internals';\n\nexport const LOTTIE_SERVER_OPTIONS = new InjectionToken<LottieServerOptions>('LottieServerOptions');\n\n@NgModule()\nexport class LottieServerModule {\n  static forRoot(options: LottieServerOptions): ModuleWithProviders<LottieServerModule> {\n    return {\n      ngModule: LottieServerModule,\n      providers: [\n        {\n          provide: LOTTIE_SERVER_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: appInitializerFactory,\n          multi: true,\n          deps: [LOTTIE_SERVER_OPTIONS, TransferState],\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}