import { join } from 'path';
import { makeStateKey } from '@angular/platform-browser';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFileWithAnimationData } from './utils';
function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    const sources = [];
    for (let i = 0, length = animations.length; i < length; i++) {
        const path = pathsToAnimations[i];
        const source = readFileWithAnimationData(path)
            .then(animationData => {
            transferAnimationData(transferState, animations[i], animationData);
        })
            .catch(error => {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                console.error(`Failed to read the following file ${path}. Error: `, error);
            }
            // This is empty since we don't have to do anything if the file was failed to read.
        });
        sources.push(source);
    }
    return sources;
}
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    const key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
export function appInitializerFactory(options, state) {
    const pathsToAnimations = resolveLottiePaths(options);
    const sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return () => Promise.all(sources);
}
export function resolveLottiePaths({ preloadAnimations }) {
    const { folder, animations } = preloadAnimations;
    const path = join(process.cwd(), folder);
    return animations.map(animation => join(path, animation));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbG90dGllL3NlcnZlci9zcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxFQUFpQixZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RSxPQUFPLEVBQXFCLCtCQUErQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRWhGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQU1wRCxTQUFTLDRCQUE0QixDQUNuQyxhQUE0QixFQUM1QixVQUErQixFQUMvQixpQkFBb0M7SUFFcEMsTUFBTSxPQUFPLEdBQW9CLEVBQUUsQ0FBQztJQUVwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNELE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sTUFBTSxHQUFHLHlCQUF5QixDQUFDLElBQUksQ0FBQzthQUMzQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDcEIscUJBQXFCLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDYixJQUFJLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLEVBQUU7Z0JBQ2pELE9BQU8sQ0FBQyxLQUFLLENBQUMscUNBQXFDLElBQUksV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzVFO1lBRUQsbUZBQW1GO1FBQ3JGLENBQUMsQ0FBQyxDQUFDO1FBRUwsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN0QjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUM1QixLQUFvQixFQUNwQixTQUE0QixFQUM1QixhQUE0QjtJQUU1QixTQUFTLEdBQUcsK0JBQStCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQTRCLEVBQUUsS0FBb0I7SUFDdEYsTUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxNQUFNLE9BQU8sR0FBRyw0QkFBNEIsQ0FDMUMsS0FBSyxFQUNMLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQ3BDLGlCQUFpQixDQUNsQixDQUFDO0lBRUYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBRSxpQkFBaUIsRUFBdUI7SUFDM0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQztJQUNqRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXpDLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSwgbWFrZVN0YXRlS2V5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IEFuaW1hdGlvbkZpbGVuYW1lLCB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5IH0gZnJvbSAnbmd4LWxvdHRpZSc7XG5cbmltcG9ydCB7IHJlYWRGaWxlV2l0aEFuaW1hdGlvbkRhdGEgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IExvdHRpZVNlcnZlck9wdGlvbnMsIFBhdGhUb0FuaW1hdGlvbiwgQW5pbWF0aW9uRGF0YSB9IGZyb20gJy4vc3ltYm9scyc7XG5cbi8qKiBXaWxsIGJlIHByb3ZpZGVkIHRocm91Z2ggVGVyc2VyIGdsb2JhbCBkZWZpbml0aW9ucyB3aGVuIHRoZSBhcHAgaXMgYnVpbGQgaW4gcHJvZHVjdGlvbiBtb2RlLiAqL1xuZGVjbGFyZSBjb25zdCBuZ0Rldk1vZGU6IGJvb2xlYW47XG5cbmZ1bmN0aW9uIHJlYWRBbmRUcmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsXG4gIGFuaW1hdGlvbnM6IEFuaW1hdGlvbkZpbGVuYW1lW10sXG4gIHBhdGhzVG9BbmltYXRpb25zOiBQYXRoVG9BbmltYXRpb25bXSxcbik6IFByb21pc2U8dm9pZD5bXSB7XG4gIGNvbnN0IHNvdXJjZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGF0aCA9IHBhdGhzVG9BbmltYXRpb25zW2ldO1xuXG4gICAgY29uc3Qgc291cmNlID0gcmVhZEZpbGVXaXRoQW5pbWF0aW9uRGF0YShwYXRoKVxuICAgICAgLnRoZW4oYW5pbWF0aW9uRGF0YSA9PiB7XG4gICAgICAgIHRyYW5zZmVyQW5pbWF0aW9uRGF0YSh0cmFuc2ZlclN0YXRlLCBhbmltYXRpb25zW2ldLCBhbmltYXRpb25EYXRhKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlYWQgdGhlIGZvbGxvd2luZyBmaWxlICR7cGF0aH0uIEVycm9yOiBgLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIGVtcHR5IHNpbmNlIHdlIGRvbid0IGhhdmUgdG8gZG8gYW55dGhpbmcgaWYgdGhlIGZpbGUgd2FzIGZhaWxlZCB0byByZWFkLlxuICAgICAgfSk7XG5cbiAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgfVxuXG4gIHJldHVybiBzb3VyY2VzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gIHN0YXRlOiBUcmFuc2ZlclN0YXRlLFxuICBhbmltYXRpb246IEFuaW1hdGlvbkZpbGVuYW1lLFxuICBhbmltYXRpb25EYXRhOiBBbmltYXRpb25EYXRhLFxuKTogdm9pZCB7XG4gIGFuaW1hdGlvbiA9IHRyYW5zZm9ybUFuaW1hdGlvbkZpbGVuYW1lVG9LZXkoYW5pbWF0aW9uKTtcbiAgY29uc3Qga2V5ID0gbWFrZVN0YXRlS2V5KGFuaW1hdGlvbik7XG4gIHN0YXRlLnNldChrZXksIEpTT04ucGFyc2UoYW5pbWF0aW9uRGF0YSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwSW5pdGlhbGl6ZXJGYWN0b3J5KG9wdGlvbnM6IExvdHRpZVNlcnZlck9wdGlvbnMsIHN0YXRlOiBUcmFuc2ZlclN0YXRlKSB7XG4gIGNvbnN0IHBhdGhzVG9BbmltYXRpb25zID0gcmVzb2x2ZUxvdHRpZVBhdGhzKG9wdGlvbnMpO1xuICBjb25zdCBzb3VyY2VzID0gcmVhZEFuZFRyYW5zZmVyQW5pbWF0aW9uRGF0YShcbiAgICBzdGF0ZSxcbiAgICBvcHRpb25zLnByZWxvYWRBbmltYXRpb25zLmFuaW1hdGlvbnMsXG4gICAgcGF0aHNUb0FuaW1hdGlvbnMsXG4gICk7XG5cbiAgcmV0dXJuICgpID0+IFByb21pc2UuYWxsKHNvdXJjZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUxvdHRpZVBhdGhzKHsgcHJlbG9hZEFuaW1hdGlvbnMgfTogTG90dGllU2VydmVyT3B0aW9ucyk6IFBhdGhUb0FuaW1hdGlvbltdIHtcbiAgY29uc3QgeyBmb2xkZXIsIGFuaW1hdGlvbnMgfSA9IHByZWxvYWRBbmltYXRpb25zO1xuICBjb25zdCBwYXRoID0gam9pbihwcm9jZXNzLmN3ZCgpLCBmb2xkZXIpO1xuXG4gIHJldHVybiBhbmltYXRpb25zLm1hcChhbmltYXRpb24gPT4gam9pbihwYXRoLCBhbmltYXRpb24pKTtcbn1cbiJdfQ==