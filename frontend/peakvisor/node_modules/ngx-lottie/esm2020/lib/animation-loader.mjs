import { Injectable, NgZone, Inject } from '@angular/core';
import { from, of, animationFrameScheduler } from 'rxjs';
import { map, observeOn, shareReplay, tap } from 'rxjs/operators';
import { LOTTIE_OPTIONS, } from './symbols';
import * as i0 from "@angular/core";
function convertPlayerOrLoaderToObservable(player, useWebWorker) {
    const playerOrLoader = player();
    const player$ = playerOrLoader instanceof Promise
        ? from(playerOrLoader).pipe(map(module => module.default || module))
        : of(playerOrLoader);
    return player$.pipe(tap(player => player.useWebWorker(useWebWorker)), shareReplay({ bufferSize: 1, refCount: true }));
}
export class AnimationLoader {
    constructor(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        this.player$ = convertPlayerOrLoaderToObservable(this.options.player, this.options.useWebWorker).pipe(observeOn(animationFrameScheduler));
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => this.createAnimationItem(player, options)));
    }
    resolveOptions(options, container) {
        return Object.assign({
            container,
            renderer: 'svg',
            loop: true,
            autoplay: true,
        }, options);
    }
    createAnimationItem(player, options) {
        return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));
    }
}
/** @nocollapse */ AnimationLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: AnimationLoader, deps: [{ token: i0.NgZone }, { token: LOTTIE_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ AnimationLoader.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: AnimationLoader, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: AnimationLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOTTIE_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LWxvdHRpZS9zcmMvbGliL2FuaW1hdGlvbi1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNELE9BQU8sRUFBYyxJQUFJLEVBQUUsRUFBRSxFQUFFLHVCQUF1QixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQ0wsY0FBYyxHQVFmLE1BQU0sV0FBVyxDQUFDOztBQUVuQixTQUFTLGlDQUFpQyxDQUN4QyxNQUFtQyxFQUNuQyxZQUFzQjtJQUV0QixNQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxNQUFNLE9BQU8sR0FDWCxjQUFjLFlBQVksT0FBTztRQUMvQixDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFekIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FDVixNQUF3RSxDQUFDLFlBQVksQ0FDcEYsWUFBWSxDQUNiLENBQ0YsRUFDRCxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUMvQyxDQUFDO0FBQ0osQ0FBQztBQUdELE1BQU0sT0FBTyxlQUFlO0lBTTFCLFlBQW9CLE1BQWMsRUFBa0MsT0FBc0I7UUFBdEUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFrQyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBTGhGLFlBQU8sR0FBRyxpQ0FBaUMsQ0FDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUMxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBRWtELENBQUM7SUFFOUYsYUFBYSxDQUNYLE9BQTBEO1FBRTFELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVELGNBQWMsQ0FDWixPQUFnQyxFQUNoQyxTQUFzQjtRQUV0QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQ2xCO1lBQ0UsU0FBUztZQUNULFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLEVBQUUsSUFBSTtTQUNmLEVBQ0QsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRVMsbUJBQW1CLENBQzNCLE1BQW9CLEVBQ3BCLE9BQTBEO1FBRTFELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7K0hBbENVLGVBQWUsd0NBTWtCLGNBQWM7bUlBTi9DLGVBQWUsY0FERixNQUFNOzJGQUNuQixlQUFlO2tCQUQzQixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7MEJBT0ssTUFBTTsyQkFBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgb2YsIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIG9ic2VydmVPbiwgc2hhcmVSZXBsYXksIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTE9UVElFX09QVElPTlMsXG4gIExvdHRpZVBsYXllcixcbiAgTG90dGllT3B0aW9ucyxcbiAgQW5pbWF0aW9uSXRlbSxcbiAgQW5pbWF0aW9uT3B0aW9ucyxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG59IGZyb20gJy4vc3ltYm9scyc7XG5cbmZ1bmN0aW9uIGNvbnZlcnRQbGF5ZXJPckxvYWRlclRvT2JzZXJ2YWJsZShcbiAgcGxheWVyOiBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG4gIHVzZVdlYldvcmtlcj86IGJvb2xlYW4sXG4pOiBPYnNlcnZhYmxlPExvdHRpZVBsYXllcj4ge1xuICBjb25zdCBwbGF5ZXJPckxvYWRlciA9IHBsYXllcigpO1xuICBjb25zdCBwbGF5ZXIkID1cbiAgICBwbGF5ZXJPckxvYWRlciBpbnN0YW5jZW9mIFByb21pc2VcbiAgICAgID8gZnJvbShwbGF5ZXJPckxvYWRlcikucGlwZShtYXAobW9kdWxlID0+IG1vZHVsZS5kZWZhdWx0IHx8IG1vZHVsZSkpXG4gICAgICA6IG9mKHBsYXllck9yTG9hZGVyKTtcblxuICByZXR1cm4gcGxheWVyJC5waXBlKFxuICAgIHRhcChwbGF5ZXIgPT5cbiAgICAgIChwbGF5ZXIgYXMgdW5rbm93biBhcyB7IHVzZVdlYldvcmtlcjogKHVzZVdlYldvcmtlcj86IGJvb2xlYW4pID0+IHZvaWQgfSkudXNlV2ViV29ya2VyKFxuICAgICAgICB1c2VXZWJXb3JrZXIsXG4gICAgICApLFxuICAgICksXG4gICAgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSxcbiAgKTtcbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBbmltYXRpb25Mb2FkZXIge1xuICBwcm90ZWN0ZWQgcGxheWVyJCA9IGNvbnZlcnRQbGF5ZXJPckxvYWRlclRvT2JzZXJ2YWJsZShcbiAgICB0aGlzLm9wdGlvbnMucGxheWVyLFxuICAgIHRoaXMub3B0aW9ucy51c2VXZWJXb3JrZXIsXG4gICkucGlwZShvYnNlcnZlT24oYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIpKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBASW5qZWN0KExPVFRJRV9PUFRJT05TKSBwcml2YXRlIG9wdGlvbnM6IExvdHRpZU9wdGlvbnMpIHt9XG5cbiAgbG9hZEFuaW1hdGlvbihcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICApOiBPYnNlcnZhYmxlPEFuaW1hdGlvbkl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIkLnBpcGUobWFwKHBsYXllciA9PiB0aGlzLmNyZWF0ZUFuaW1hdGlvbkl0ZW0ocGxheWVyLCBvcHRpb25zKSkpO1xuICB9XG5cbiAgcmVzb2x2ZU9wdGlvbnMoXG4gICAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGwsXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgKTogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgcmVuZGVyZXI6ICdzdmcnLFxuICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBvcHRpb25zLFxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlQW5pbWF0aW9uSXRlbShcbiAgICBwbGF5ZXI6IExvdHRpZVBsYXllcixcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICApOiBBbmltYXRpb25JdGVtIHtcbiAgICByZXR1cm4gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gcGxheWVyLmxvYWRBbmltYXRpb24ob3B0aW9ucykpO1xuICB9XG59XG4iXX0=