import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { AnimationLoader } from '../animation-loader';
import * as i0 from "@angular/core";
export class CacheableAnimationLoader extends AnimationLoader {
    constructor() {
        super(...arguments);
        this.cache = new Map();
    }
    ngOnDestroy() {
        this.cache.clear();
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => {
            const animationItem = this.createAnimationItem(player, this.transformOptions(options));
            this.awaitConfigAndCache(options, animationItem);
            return animationItem;
        }));
    }
    awaitConfigAndCache(options, animationItem) {
        if (this.isAnimationConfigWithPath(options)) {
            // Don't wait for the `config_ready` event if it has been cached previously.
            if (this.cache.has(options.path)) {
                return;
            }
            animationItem.addEventListener('config_ready', () => {
                // See the comments below on why we're storing the animation data as a string.
                this.cache.set(options.path, JSON.stringify(animationItem['animationData']));
            });
        }
    }
    transformOptions(options) {
        if (this.isAnimationConfigWithPath(options) && this.cache.has(options.path)) {
            return {
                ...options,
                path: undefined,
                // Caretaker note: `lottie-web` cannot re-use the `animationData` object between animations, and we
                // have to retrieve a new object each time an animation is created.
                // https://github.com/airbnb/lottie-web#html
                // See comments for the `animationData` property.
                animationData: JSON.parse(this.cache.get(options.path)),
            };
        }
        else {
            return options;
        }
    }
    isAnimationConfigWithPath(options) {
        return typeof options.path === 'string';
    }
}
/** @nocollapse */ CacheableAnimationLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: CacheableAnimationLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CacheableAnimationLoader.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: CacheableAnimationLoader, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: CacheableAnimationLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVhYmxlLWFuaW1hdGlvbi1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1sb3R0aWUvc3JjL2xpYi9jYWNoZWFibGUtYW5pbWF0aW9uLWxvYWRlci9jYWNoZWFibGUtYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBSXRELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxlQUFlO0lBRDdEOztRQUVVLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztLQXdEM0M7SUF0REMsV0FBVztRQUNULElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUEwRDtRQUN0RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDakQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTyxtQkFBbUIsQ0FDekIsT0FBMEQsRUFDMUQsYUFBNEI7UUFFNUIsSUFBSSxJQUFJLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0MsNEVBQTRFO1lBQzVFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUssQ0FBQyxFQUFFO2dCQUNqQyxPQUFPO2FBQ1I7WUFFRCxhQUFhLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtnQkFDbEQsOEVBQThFO2dCQUM5RSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVPLGdCQUFnQixDQUN0QixPQUEwRDtRQUUxRCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSyxDQUFDLEVBQUU7WUFDNUUsT0FBTztnQkFDTCxHQUFHLE9BQU87Z0JBQ1YsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsbUdBQW1HO2dCQUNuRyxtRUFBbUU7Z0JBQ25FLDRDQUE0QztnQkFDNUMsaURBQWlEO2dCQUNqRCxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSyxDQUFFLENBQUM7YUFDMUQsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQztTQUNoQjtJQUNILENBQUM7SUFFTyx5QkFBeUIsQ0FDL0IsT0FBZ0M7UUFFaEMsT0FBTyxPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0lBQzFDLENBQUM7O3dJQXhEVSx3QkFBd0I7NElBQXhCLHdCQUF3QixjQURYLE1BQU07MkZBQ25CLHdCQUF3QjtrQkFEcEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi4vYW5pbWF0aW9uLWxvYWRlcic7XG5pbXBvcnQgeyBBbmltYXRpb25JdGVtLCBBbmltYXRpb25Db25maWdXaXRoRGF0YSwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGggfSBmcm9tICcuLi9zeW1ib2xzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDYWNoZWFibGVBbmltYXRpb25Mb2FkZXIgZXh0ZW5kcyBBbmltYXRpb25Mb2FkZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gIH1cblxuICBsb2FkQW5pbWF0aW9uKG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIkLnBpcGUoXG4gICAgICBtYXAocGxheWVyID0+IHtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uSXRlbSA9IHRoaXMuY3JlYXRlQW5pbWF0aW9uSXRlbShwbGF5ZXIsIHRoaXMudHJhbnNmb3JtT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICAgIHRoaXMuYXdhaXRDb25maWdBbmRDYWNoZShvcHRpb25zLCBhbmltYXRpb25JdGVtKTtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkl0ZW07XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhd2FpdENvbmZpZ0FuZENhY2hlKFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gICAgYW5pbWF0aW9uSXRlbTogQW5pbWF0aW9uSXRlbSxcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNBbmltYXRpb25Db25maWdXaXRoUGF0aChvcHRpb25zKSkge1xuICAgICAgLy8gRG9uJ3Qgd2FpdCBmb3IgdGhlIGBjb25maWdfcmVhZHlgIGV2ZW50IGlmIGl0IGhhcyBiZWVuIGNhY2hlZCBwcmV2aW91c2x5LlxuICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzKG9wdGlvbnMucGF0aCEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjb25maWdfcmVhZHknLCAoKSA9PiB7XG4gICAgICAgIC8vIFNlZSB0aGUgY29tbWVudHMgYmVsb3cgb24gd2h5IHdlJ3JlIHN0b3JpbmcgdGhlIGFuaW1hdGlvbiBkYXRhIGFzIGEgc3RyaW5nLlxuICAgICAgICB0aGlzLmNhY2hlLnNldChvcHRpb25zLnBhdGghLCBKU09OLnN0cmluZ2lmeShhbmltYXRpb25JdGVtWydhbmltYXRpb25EYXRhJ10pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdHJhbnNmb3JtT3B0aW9ucyhcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICApOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHtcbiAgICBpZiAodGhpcy5pc0FuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoKG9wdGlvbnMpICYmIHRoaXMuY2FjaGUuaGFzKG9wdGlvbnMucGF0aCEpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBwYXRoOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIENhcmV0YWtlciBub3RlOiBgbG90dGllLXdlYmAgY2Fubm90IHJlLXVzZSB0aGUgYGFuaW1hdGlvbkRhdGFgIG9iamVjdCBiZXR3ZWVuIGFuaW1hdGlvbnMsIGFuZCB3ZVxuICAgICAgICAvLyBoYXZlIHRvIHJldHJpZXZlIGEgbmV3IG9iamVjdCBlYWNoIHRpbWUgYW4gYW5pbWF0aW9uIGlzIGNyZWF0ZWQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvbG90dGllLXdlYiNodG1sXG4gICAgICAgIC8vIFNlZSBjb21tZW50cyBmb3IgdGhlIGBhbmltYXRpb25EYXRhYCBwcm9wZXJ0eS5cbiAgICAgICAgYW5pbWF0aW9uRGF0YTogSlNPTi5wYXJzZSh0aGlzLmNhY2hlLmdldChvcHRpb25zLnBhdGghKSEpLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc0FuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoKFxuICAgIG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICApOiBvcHRpb25zIGlzIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHtcbiAgICByZXR1cm4gdHlwZW9mIG9wdGlvbnMucGF0aCA9PT0gJ3N0cmluZyc7XG4gIH1cbn1cbiJdfQ==