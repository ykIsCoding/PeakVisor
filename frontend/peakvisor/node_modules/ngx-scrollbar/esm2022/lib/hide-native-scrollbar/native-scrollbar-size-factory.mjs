import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, fromEvent, debounceTime, tap, distinctUntilChanged, map } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../utils/scrollbar-manager";
import * as i2 from "@angular/cdk/platform";
export class NativeScrollbarSizeFactory {
    constructor(document, manager, platform) {
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        this._scrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize());
        this.scrollbarSize = this._scrollbarSize.asObservable();
        // Calculate native scrollbar size on window resize event, because the size changes if use zoomed in/out
        if (platform.isBrowser) {
            fromEvent(this.document.defaultView, 'resize', { passive: true }).pipe(debounceTime(this.manager.globalOptions.windowResizeDebounce), map(() => this.getNativeScrollbarSize()), distinctUntilChanged(), tap((size) => this._scrollbarSize.next(size))).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     */
    getNativeScrollbarSize() {
        // Avoid executing browser code in server side rendering
        if (!this.platform.isBrowser) {
            return 0;
        }
        // Hide iOS browsers native scrollbar
        if (this.platform.IOS) {
            return 6;
        }
        const box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        box.style.left = '0px';
        box.style.overflow = 'scroll';
        box.style.position = 'fixed';
        box.style.top = '-9999px';
        this.document.body.appendChild(box);
        const size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        return size;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: NativeScrollbarSizeFactory, deps: [{ token: DOCUMENT }, { token: i1.ScrollbarManager }, { token: i2.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: NativeScrollbarSizeFactory, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: NativeScrollbarSizeFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.ScrollbarManager }, { type: i2.Platform }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvaGlkZS1uYXRpdmUtc2Nyb2xsYmFyL25hdGl2ZS1zY3JvbGxiYXItc2l6ZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLFNBQVMsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQUk1RyxNQUFNLE9BQU8sMEJBQTBCO0lBSXJDLFlBQXNDLFFBQWtCLEVBQ3BDLE9BQXlCLEVBQ3pCLFFBQWtCO1FBRkEsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTHJCLG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQVMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQztRQUM3RixrQkFBYSxHQUF1QixJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBS3JFLHdHQUF3RztRQUN4RyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDdEIsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDcEUsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEVBQzdELEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUN4QyxvQkFBb0IsRUFBRSxFQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3RELENBQUMsU0FBUyxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNLLHNCQUFzQjtRQUM1Qix3REFBd0Q7UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQzVCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxxQ0FBcUM7UUFDckMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNyQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztRQUN2QyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDdkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzhHQXhDVSwwQkFBMEIsa0JBSWpCLFFBQVE7a0hBSmpCLDBCQUEwQixjQURiLE1BQU07OzJGQUNuQiwwQkFBMEI7a0JBRHRDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzswQkFLbkIsTUFBTTsyQkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIGZyb21FdmVudCwgZGVib3VuY2VUaW1lLCB0YXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgU2Nyb2xsYmFyTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JvbGxiYXJTaXplRmFjdG9yeSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfc2Nyb2xsYmFyU2l6ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmdldE5hdGl2ZVNjcm9sbGJhclNpemUoKSk7XHJcbiAgc2Nyb2xsYmFyU2l6ZTogT2JzZXJ2YWJsZTxudW1iZXI+ID0gdGhpcy5fc2Nyb2xsYmFyU2l6ZS5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBtYW5hZ2VyOiBTY3JvbGxiYXJNYW5hZ2VyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgcGxhdGZvcm06IFBsYXRmb3JtKSB7XHJcbiAgICAvLyBDYWxjdWxhdGUgbmF0aXZlIHNjcm9sbGJhciBzaXplIG9uIHdpbmRvdyByZXNpemUgZXZlbnQsIGJlY2F1c2UgdGhlIHNpemUgY2hhbmdlcyBpZiB1c2Ugem9vbWVkIGluL291dFxyXG4gICAgaWYgKHBsYXRmb3JtLmlzQnJvd3Nlcikge1xyXG4gICAgICBmcm9tRXZlbnQodGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldywgJ3Jlc2l6ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSh0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy53aW5kb3dSZXNpemVEZWJvdW5jZSksXHJcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuZ2V0TmF0aXZlU2Nyb2xsYmFyU2l6ZSgpKSxcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxyXG4gICAgICAgIHRhcCgoc2l6ZTogbnVtYmVyKSA9PiB0aGlzLl9zY3JvbGxiYXJTaXplLm5leHQoc2l6ZSkpXHJcbiAgICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgbmF0aXZlIHNjcm9sbGJhciBzaXplXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXROYXRpdmVTY3JvbGxiYXJTaXplKCk6IG51bWJlciB7XHJcbiAgICAvLyBBdm9pZCBleGVjdXRpbmcgYnJvd3NlciBjb2RlIGluIHNlcnZlciBzaWRlIHJlbmRlcmluZ1xyXG4gICAgaWYgKCF0aGlzLnBsYXRmb3JtLmlzQnJvd3Nlcikge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIC8vIEhpZGUgaU9TIGJyb3dzZXJzIG5hdGl2ZSBzY3JvbGxiYXJcclxuICAgIGlmICh0aGlzLnBsYXRmb3JtLklPUykge1xyXG4gICAgICByZXR1cm4gNjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJveCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBib3guY2xhc3NOYW1lID0gJ25nLXNjcm9sbGJhci1tZWFzdXJlJztcclxuICAgIGJveC5zdHlsZS5sZWZ0ID0gJzBweCc7XHJcbiAgICBib3guc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcclxuICAgIGJveC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICBib3guc3R5bGUudG9wID0gJy05OTk5cHgnO1xyXG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJveCk7XHJcbiAgICBjb25zdCBzaXplID0gYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xyXG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGJveCk7XHJcbiAgICByZXR1cm4gc2l6ZTtcclxuICB9XHJcbn1cclxuIl19