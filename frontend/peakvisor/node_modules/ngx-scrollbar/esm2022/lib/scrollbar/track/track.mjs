import { Directive } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { EMPTY, fromEvent, merge, of, map, switchMap, tap } from 'rxjs';
import { preventSelection, enableSelection, stopPropagation } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../../ng-scrollbar-base";
// @dynamic
export class TrackAdapter {
    // Stream that emits when the track element is clicked
    get clicked() {
        const mouseDown = fromEvent(this.trackElement, 'mousedown', { passive: true }).pipe(stopPropagation(), preventSelection(this.document));
        const mouseup = fromEvent(this.document, 'mouseup', { passive: true }).pipe(stopPropagation(), enableSelection(this.document), switchMap(() => EMPTY));
        return merge(mouseDown, mouseup);
    }
    // Get track client rect
    get clientRect() {
        return this.trackElement.getBoundingClientRect();
    }
    constructor(cmp, trackElement, document) {
        this.cmp = cmp;
        this.trackElement = trackElement;
        this.document = document;
    }
    /**
     * Stream that emits when scrollbar track is clicked
     */
    onTrackClicked(e, thumbSize, scrollSize) {
        return of(e).pipe(map((e) => e[this.pageProperty]), 
        // Calculate scrollTo position
        map((pageOffset) => {
            const clickOffset = pageOffset - this.offset;
            const offset = clickOffset - (thumbSize / 2);
            const ratio = offset / this.size;
            return ratio * scrollSize;
        }), 
        // Smooth scroll to position
        tap((value) => {
            this.cmp.scrollTo({
                ...this.mapToScrollToOption(value),
                duration: coerceNumberProperty(this.cmp.trackClickScrollDuration)
            });
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TrackAdapter, deps: [{ token: i1.NgScrollbarBase }, { token: HTMLElement }, { token: Document }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.5", type: TrackAdapter, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TrackAdapter, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: HTMLElement }, { type: Document }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvc2Nyb2xsYmFyL3RyYWNrL3RyYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFjLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7O0FBRy9FLFdBQVc7QUFFWCxNQUFNLE9BQWdCLFlBQVk7SUFFaEMsc0RBQXNEO0lBQ3RELElBQUksT0FBTztRQUNULE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBYSxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDN0YsZUFBZSxFQUFFLEVBQ2pCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDaEMsQ0FBQztRQUNGLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBYSxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDckYsZUFBZSxFQUFFLEVBQ2pCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzlCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FDdkIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBV0Qsd0JBQXdCO0lBQ3hCLElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRCxZQUFnQyxHQUFvQixFQUNwQixZQUF5QixFQUN6QixRQUFrQjtRQUZsQixRQUFHLEdBQUgsR0FBRyxDQUFpQjtRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ2xELENBQUM7SUFFRDs7T0FFRztJQUNILGNBQWMsQ0FBQyxDQUFhLEVBQUUsU0FBaUIsRUFBRSxVQUFrQjtRQUNqRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVDLDhCQUE4QjtRQUM5QixHQUFHLENBQUMsQ0FBQyxVQUFrQixFQUFFLEVBQUU7WUFDekIsTUFBTSxXQUFXLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDN0MsTUFBTSxNQUFNLEdBQUcsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2pDLE9BQU8sS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUM1QixDQUFDLENBQUM7UUFDRiw0QkFBNEI7UUFDNUIsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7Z0JBQ2hCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztnQkFDbEMsUUFBUSxFQUFFLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7YUFDbEUsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OEdBeERtQixZQUFZO2tHQUFaLFlBQVk7OzJGQUFaLFlBQVk7a0JBRGpDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBFTVBUWSwgZnJvbUV2ZW50LCBtZXJnZSwgb2YsIG1hcCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgcHJldmVudFNlbGVjdGlvbiwgZW5hYmxlU2VsZWN0aW9uLCBzdG9wUHJvcGFnYXRpb24gfSBmcm9tICcuLi9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhckJhc2UgfSBmcm9tICcuLi8uLi9uZy1zY3JvbGxiYXItYmFzZSc7XHJcblxyXG4vLyBAZHluYW1pY1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRyYWNrQWRhcHRlciB7XHJcblxyXG4gIC8vIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIHRyYWNrIGVsZW1lbnQgaXMgY2xpY2tlZFxyXG4gIGdldCBjbGlja2VkKCk6IE9ic2VydmFibGU8TW91c2VFdmVudD4ge1xyXG4gICAgY29uc3QgbW91c2VEb3duID0gZnJvbUV2ZW50PE1vdXNlRXZlbnQ+KHRoaXMudHJhY2tFbGVtZW50LCAnbW91c2Vkb3duJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgIHN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgICBwcmV2ZW50U2VsZWN0aW9uKHRoaXMuZG9jdW1lbnQpXHJcbiAgICApO1xyXG4gICAgY29uc3QgbW91c2V1cCA9IGZyb21FdmVudDxNb3VzZUV2ZW50Pih0aGlzLmRvY3VtZW50LCAnbW91c2V1cCcsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxyXG4gICAgICBzdG9wUHJvcGFnYXRpb24oKSxcclxuICAgICAgZW5hYmxlU2VsZWN0aW9uKHRoaXMuZG9jdW1lbnQpLFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gRU1QVFkpXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIG1lcmdlKG1vdXNlRG93biwgbW91c2V1cCk7XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm5zIGVpdGhlciAncGFnZVgnIG9yICdwYWdlWScgYWNjb3JkaW5nIHRvIHNjcm9sbGJhciBheGlzXHJcbiAgYWJzdHJhY3QgZ2V0IHBhZ2VQcm9wZXJ0eSgpOiBzdHJpbmc7XHJcblxyXG4gIC8vIFJldHVybnMgdGhlIHRyYWNrIHNpemUsIGNsaWVudEhlaWdodCBvciBjbGllbnRXaWR0aFxyXG4gIGFic3RyYWN0IGdldCBzaXplKCk6IG51bWJlcjtcclxuXHJcbiAgLy8gUmV0dXJucyB0aGUgc3RhcnQgb2Zmc2V0IGVpdGhlciAnY2xpZW50UmVjdC50b3AnIG9yICdjbGllbnRSZWN0LmxlZnQnXHJcbiAgYWJzdHJhY3QgZ2V0IG9mZnNldCgpOiBudW1iZXI7XHJcblxyXG4gIC8vIEdldCB0cmFjayBjbGllbnQgcmVjdFxyXG4gIGdldCBjbGllbnRSZWN0KCk6IERPTVJlY3Qge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhY2tFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjbXA6IE5nU2Nyb2xsYmFyQmFzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIHRyYWNrRWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCBkb2N1bWVudDogRG9jdW1lbnQpIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gc2Nyb2xsYmFyIHRyYWNrIGlzIGNsaWNrZWRcclxuICAgKi9cclxuICBvblRyYWNrQ2xpY2tlZChlOiBNb3VzZUV2ZW50LCB0aHVtYlNpemU6IG51bWJlciwgc2Nyb2xsU2l6ZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcclxuICAgIHJldHVybiBvZihlKS5waXBlKFxyXG4gICAgICBtYXAoKGU6IE1vdXNlRXZlbnQpID0+IGVbdGhpcy5wYWdlUHJvcGVydHldKSxcclxuICAgICAgLy8gQ2FsY3VsYXRlIHNjcm9sbFRvIHBvc2l0aW9uXHJcbiAgICAgIG1hcCgocGFnZU9mZnNldDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tPZmZzZXQgPSBwYWdlT2Zmc2V0IC0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2xpY2tPZmZzZXQgLSAodGh1bWJTaXplIC8gMik7XHJcbiAgICAgICAgY29uc3QgcmF0aW8gPSBvZmZzZXQgLyB0aGlzLnNpemU7XHJcbiAgICAgICAgcmV0dXJuIHJhdGlvICogc2Nyb2xsU2l6ZTtcclxuICAgICAgfSksXHJcbiAgICAgIC8vIFNtb290aCBzY3JvbGwgdG8gcG9zaXRpb25cclxuICAgICAgdGFwKCh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jbXAuc2Nyb2xsVG8oe1xyXG4gICAgICAgICAgLi4udGhpcy5tYXBUb1Njcm9sbFRvT3B0aW9uKHZhbHVlKSxcclxuICAgICAgICAgIGR1cmF0aW9uOiBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh0aGlzLmNtcC50cmFja0NsaWNrU2Nyb2xsRHVyYXRpb24pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IG1hcFRvU2Nyb2xsVG9PcHRpb24odmFsdWU6IG51bWJlcik6IFNjcm9sbFRvT3B0aW9ucztcclxufVxyXG4iXX0=