import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
const defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0,
    viewportPropagateMouseMove: true,
    autoHeightDisabled: true,
    autoWidthDisabled: true,
    sensorDisabled: false,
    pointerEventsDisabled: false
};
export class ScrollbarManager {
    constructor(options) {
        this.globalOptions = options ? { ...defaultOptions, ...options } : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: ScrollbarManager, deps: [{ token: NG_SCROLLBAR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: ScrollbarManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: ScrollbarManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_SCROLLBAR_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBcUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRixPQUFPLEVBQXFCLG9CQUFvQixFQUFzQixNQUFNLHVCQUF1QixDQUFDOztBQUVwRyxNQUFNLGNBQWMsR0FBc0I7SUFDeEMsU0FBUyxFQUFFLEVBQUU7SUFDYixVQUFVLEVBQUUsRUFBRTtJQUNkLFVBQVUsRUFBRSxFQUFFO0lBQ2QsS0FBSyxFQUFFLFVBQVU7SUFDakIsVUFBVSxFQUFFLFNBQVM7SUFDckIsVUFBVSxFQUFFLFFBQVE7SUFDcEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsbUJBQW1CLEVBQUUsVUFBVTtJQUMvQix3QkFBd0IsRUFBRSxHQUFHO0lBQzdCLFlBQVksRUFBRSxFQUFFO0lBQ2hCLG9CQUFvQixFQUFFLENBQUM7SUFDdkIsY0FBYyxFQUFFLENBQUM7SUFDakIsZUFBZSxFQUFFLENBQUM7SUFDbEIsMEJBQTBCLEVBQUUsSUFBSTtJQUNoQyxrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsY0FBYyxFQUFFLEtBQUs7SUFDckIscUJBQXFCLEVBQUUsS0FBSztDQUM3QixDQUFDO0FBR0YsTUFBTSxPQUFPLGdCQUFnQjtJQUszQixZQUFzRCxPQUEyQjtRQUMvRSxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLGNBQWMsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFFbEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG9CQUFvQixFQUFFLENBQUM7SUFDbEQsQ0FBQzs4R0FUVSxnQkFBZ0Isa0JBS0ssb0JBQW9CO2tIQUx6QyxnQkFBZ0IsY0FESCxNQUFNOzsyRkFDbkIsZ0JBQWdCO2tCQUQ1QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7MEJBTW5CLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBnZXRSdGxTY3JvbGxBeGlzVHlwZSwgUnRsU2Nyb2xsQXhpc1R5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5pbXBvcnQgeyBJU2Nyb2xsYmFyT3B0aW9ucywgTkdfU0NST0xMQkFSX09QVElPTlMsIE5nU2Nyb2xsYmFyT3B0aW9ucyB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9uczogSVNjcm9sbGJhck9wdGlvbnMgPSB7XHJcbiAgdmlld0NsYXNzOiAnJyxcclxuICB0cmFja0NsYXNzOiAnJyxcclxuICB0aHVtYkNsYXNzOiAnJyxcclxuICB0cmFjazogJ3ZlcnRpY2FsJyxcclxuICBhcHBlYXJhbmNlOiAnY29tcGFjdCcsXHJcbiAgdmlzaWJpbGl0eTogJ25hdGl2ZScsXHJcbiAgcG9zaXRpb246ICduYXRpdmUnLFxyXG4gIHBvaW50ZXJFdmVudHNNZXRob2Q6ICd2aWV3cG9ydCcsXHJcbiAgdHJhY2tDbGlja1Njcm9sbER1cmF0aW9uOiAzMDAsXHJcbiAgbWluVGh1bWJTaXplOiAyMCxcclxuICB3aW5kb3dSZXNpemVEZWJvdW5jZTogMCxcclxuICBzZW5zb3JEZWJvdW5jZTogMCxcclxuICBzY3JvbGxBdWRpdFRpbWU6IDAsXHJcbiAgdmlld3BvcnRQcm9wYWdhdGVNb3VzZU1vdmU6IHRydWUsXHJcbiAgYXV0b0hlaWdodERpc2FibGVkOiB0cnVlLFxyXG4gIGF1dG9XaWR0aERpc2FibGVkOiB0cnVlLFxyXG4gIHNlbnNvckRpc2FibGVkOiBmYWxzZSxcclxuICBwb2ludGVyRXZlbnRzRGlzYWJsZWQ6IGZhbHNlXHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsYmFyTWFuYWdlciB7XHJcbiAgcmVhZG9ubHkgZ2xvYmFsT3B0aW9uczogSVNjcm9sbGJhck9wdGlvbnM7XHJcblxyXG4gIHJlYWRvbmx5IHJ0bFNjcm9sbEF4aXNUeXBlOiBSdGxTY3JvbGxBeGlzVHlwZTtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOR19TQ1JPTExCQVJfT1BUSU9OUykgb3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zKSB7XHJcbiAgICB0aGlzLmdsb2JhbE9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9IDogZGVmYXVsdE9wdGlvbnM7XHJcblxyXG4gICAgdGhpcy5ydGxTY3JvbGxBeGlzVHlwZSA9IGdldFJ0bFNjcm9sbEF4aXNUeXBlKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==